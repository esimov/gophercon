Face detection with Go
Gopherconf India 2020

Endre Simo
https://esimov.com
https://github.com/esimov
https://twitter/simo_endre

* Agenda
- What is Pigo? Why it has been developed?
- Key features
- Technical overview
- Pigo and GoCV (OpenCV) comparision
- Use cases and integrations
- Pupils/eyes localization
- Facial landmark points detection
- Real time demos
- Running the face detector from Python as shared library
- Porting to Webassembly (WASM)

* What is Pigo? Why it has been developed?

* What is Pigo?
.image assets/pigo_logo.png 300 _
- Computer vision and machine learning library for face detection, pupils/eyes localization and facial landmark points detection
- The only face detection library in the Go ecosystem developed 100% in Go
- The implementation is based on _Pixel_ _Intensity_ _Comparison-based_ _Object_ _detection_ paper

* Why it has been developed?

- Installing OpenCV sometimes can be daunting
- OpenCV is huge, impossible to deploy it on small platforms where space constraints are important

: All the existing libraries in the Go ecosystem are actually bindings to or wrappers around other well known machine learning and computer vision libraries developed mostly in C. Bindings are not cost effective. But more on this topic later.
: There is no need to install platform dependent libraries, no need to compile and build a giant and monolithic OpenCV library only for face detection.

* Key features

What are the benefits of using Pigo over other existing solutions? Just to name a few of them:

- Very lightweight, no requirements for 3rd party modules and external libraries
- Platform independent, one single executable
- Simple and elegant API
- High processing speed
- There is no need for image preprocessing prior detection
- The face detection is based on pixel intensity comparison encoded in the binary file tree structure
- Fast detection of in-plane rotated faces
- Pupils/eyes localization
- Facial landmark points detection

* Technical overview

* Technical overview
- Pigo, like the Viola Jones face detection algorithm is also constructed around cascade decision trees, but the cascade classifier is in binary format
- The role of a classifier is to tell if a face is present in the current region or not
- The classifier consists of a decision tree, where the results of pixel intensity comparison test are in binary format.
- Because the cascades are encoded into a binary tree structure they first need to be unpacked.
- An image region is considered being face if it passes all the cascade members. Since this process is limited to a relatively small number of regions, this gains high computation speed.
- During the decision tree scanning each detection is flagged with a detection score.
- An image region is considered as face if the detection score is above a certain threshold (*~0.995*)

* Technical overview
- Due to the noisiness of the underlying pixel data, the detector might produce overlaps in detections.
.image assets/pigo_output_without_clustering-1024x819.png 300 _
- The cascade regions are clustered together by aplying an *IoU* (Intersection over Union) formula over the detection results.

* Technical overview
    sort.Sort(det(detections))

    calcIoU := func(det1, det2 Detection) float64 {
        // Unpack the position and size of each detection.
        r1, c1, s1 := float64(det1.Row), float64(det1.Col), float64(det1.Scale)
        r2, c2, s2 := float64(det2.Row), float64(det2.Col), float64(det2.Scale)

        overRow := math.Max(0, math.Min(r1+s1/2, r2+s2/2)-math.Max(r1-s1/2, r2-s2/2))
        overCol := math.Max(0, math.Min(c1+s1/2, c2+s2/2)-math.Max(c1-s1/2, c2-s2/2))

        // Return intersection over union.
        return overRow * overCol / (s1*s1 + s2*s2 - overRow*overCol)
    }

* End result
.image assets/pigo_clustering-1024x819.png 550 _

* Pigo and GoCV (OpenCV) comparision

* Benchmark results
    BenchmarkGoCV-4   	       3	 414122553 ns/op	     704 B/op	       1 allocs/op
    BenchmarkPIGO-4   	      10	 173664832 ns/op	       0 B/op	       0 allocs/op
    PASS
    ok  	github.com/esimov/gocv-test	4.530s

.link https://github.com/esimov/pigo-gocv-benchmark

: To have a more accurate benchmark and to measure only the execution time the `b.ResetTimer()` is called to reset the timer so the setup is not counted towards the benchmark.
: For the above test we were using a sample image with a Nasa crew of 17 persons. Both of the libraries have returned exactly the same results, but Pigo was faster and also the memory allocation was way less compared to GoCV
